1. Difference between HTTP1.1 vs HTTP2

HTTP stands for hypertext transfer protocol, and it is the method computers and servers use to request and send information.

The first usable version of HTTP was created in 1997 and this first version of HTTP was called HTTP/1.1.

HTTP/2 solves several problems that the creators of HTTP/1.1 and it is much faster and more efficient than HTTP/1.1.

HTTP/2 is faster is in how it prioritizes content during the loading process.

Prioritization affects a webpage's load time.
For example, certain resources, like large JavaScript files, may block the rest of the page from loading if they have to load first.
More of the page can load at once if these render-blocking resources load last.

Multiplexing: 
		HTTP/1.1 loads resources one after the other, so if one resource cannot be loaded, it blocks all the other resources behind it.
In contrast, HTTP/2 is able to use a single TCP connection to send multiple streams of data at once so that no one resource blocks any other resource.
HTTP/2 does this by splitting data into binary-code messages and numbering these messages so that the client knows which stream each binary message belongs to.

Server push:
		Typically, a server only serves content to a client device if the client asks for it.
However, this approach is not always practical for modern webpages, which often involve several dozen separate resources that the client must request.
HTTP/2 solves this problem by allowing a server to "push" content to a client before the client asks for it.
The server also sends a message letting the client know what pushed content to expect – like if Bob had sent Alice a Table of Contents of his novel before sending the whole thing.

Header compression:
		Small files load more quickly than large ones. To speed up web performance, both HTTP/1.1 and HTTP/2 compress HTTP messages to make them smaller.
However, HTTP/2 uses a more advanced compression method called HPACK that eliminates redundant information in HTTP header packets.
This eliminates a few bytes from every HTTP packet. Given the volume of HTTP packets involved in loading even a single webpage, those bytes add up quickly, resulting in faster loading.

2.History of HTTP Versions

		HTTP (HyperText Transfer Protocol) is the underlying protocol of the World Wide Web.
Developed by Tim Berners-Lee and his team between 1989-1991, HTTP has seen many changes, keeping most of the simplicity and further shaping its flexibility.
HTTP has evolved from an early protocol to exchange files in a semi-trusted laboratory environment, to the modern maze of the Internet, now carrying images, videos in high resolution and 3D.





3. Difference between JS( Console) vs Node.Js

In browser “window” is a predefined global object which has functions and attributes, where as Nodejs doesn’t have it.
In browser “location” is another predefined object, where as Nodejs doesn’t have it.
In browser “require” is not predefined object, where as Nodejs has it.
In browser module is not required, where as in Nodejs you have to keep your code inside the module.
In browser “document” is a predefined object, where as Nodejs doesn’t have it.

4.What happens when you enter URL into Browser

1. Browser checks cache for DNS entry to find the corresponding IP address of website.
It looks for following cache. If not found in one, then continues checking to the next until found.
Browser Cache
Operating Systems Cache
Router Cache
ISP Cache
2. If not found in cache, ISP’s (Internet Service Provider) DNS server initiates a DNS query to find IP address of server that hosts the domain name.
The requests are sent using small data packets that contain information content of request and IP address it is destined for.
3. Browser initiates a TCP (Transfer Control Protocol) connection with the server using synchronize(SYN) and acknowledge(ACK) messages.
4. Browser sends an HTTP request to the web server. GET or POST request.
5. Server on the host computer handles that request and sends back a response. It assembles a response in some format like JSON, XML and HTML.
6. Server sends out an HTTP response along with the status of response.
7. Browser displays HTML content
8. Finally, Done.




